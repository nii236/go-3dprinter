// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Gcode is an object representing the database table.
type Gcode struct {
	ID        string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	BlobID    string    `db:"blob_id" boil:"blob_id" json:"blob_id" toml:"blob_id" yaml:"blob_id"`
	DeletedAt null.Time `db:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt time.Time `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *gcodeR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L gcodeL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GcodeColumns = struct {
	ID        string
	Name      string
	BlobID    string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	Name:      "name",
	BlobID:    "blob_id",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

// Generated where

var GcodeWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	BlobID    whereHelperstring
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"gcodes\".\"id\""},
	Name:      whereHelperstring{field: "\"gcodes\".\"name\""},
	BlobID:    whereHelperstring{field: "\"gcodes\".\"blob_id\""},
	DeletedAt: whereHelpernull_Time{field: "\"gcodes\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"gcodes\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"gcodes\".\"created_at\""},
}

// GcodeRels is where relationship names are stored.
var GcodeRels = struct {
	Blob string
}{
	Blob: "Blob",
}

// gcodeR is where relationships are stored.
type gcodeR struct {
	Blob *Blob `db:"Blob" boil:"Blob" json:"Blob" toml:"Blob" yaml:"Blob"`
}

// NewStruct creates a new relationship struct
func (*gcodeR) NewStruct() *gcodeR {
	return &gcodeR{}
}

// gcodeL is where Load methods for each relationship are stored.
type gcodeL struct{}

var (
	gcodeAllColumns            = []string{"id", "name", "blob_id", "deleted_at", "updated_at", "created_at"}
	gcodeColumnsWithoutDefault = []string{"name", "blob_id", "deleted_at"}
	gcodeColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	gcodePrimaryKeyColumns     = []string{"id"}
)

type (
	// GcodeSlice is an alias for a slice of pointers to Gcode.
	// This should generally be used opposed to []Gcode.
	GcodeSlice []*Gcode
	// GcodeHook is the signature for custom Gcode hook methods
	GcodeHook func(boil.Executor, *Gcode) error

	gcodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gcodeType                 = reflect.TypeOf(&Gcode{})
	gcodeMapping              = queries.MakeStructMapping(gcodeType)
	gcodePrimaryKeyMapping, _ = queries.BindMapping(gcodeType, gcodeMapping, gcodePrimaryKeyColumns)
	gcodeInsertCacheMut       sync.RWMutex
	gcodeInsertCache          = make(map[string]insertCache)
	gcodeUpdateCacheMut       sync.RWMutex
	gcodeUpdateCache          = make(map[string]updateCache)
	gcodeUpsertCacheMut       sync.RWMutex
	gcodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gcodeBeforeInsertHooks []GcodeHook
var gcodeBeforeUpdateHooks []GcodeHook
var gcodeBeforeDeleteHooks []GcodeHook
var gcodeBeforeUpsertHooks []GcodeHook

var gcodeAfterInsertHooks []GcodeHook
var gcodeAfterSelectHooks []GcodeHook
var gcodeAfterUpdateHooks []GcodeHook
var gcodeAfterDeleteHooks []GcodeHook
var gcodeAfterUpsertHooks []GcodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Gcode) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Gcode) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Gcode) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Gcode) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Gcode) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Gcode) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Gcode) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Gcode) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Gcode) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gcodeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGcodeHook registers your hook function for all future operations.
func AddGcodeHook(hookPoint boil.HookPoint, gcodeHook GcodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gcodeBeforeInsertHooks = append(gcodeBeforeInsertHooks, gcodeHook)
	case boil.BeforeUpdateHook:
		gcodeBeforeUpdateHooks = append(gcodeBeforeUpdateHooks, gcodeHook)
	case boil.BeforeDeleteHook:
		gcodeBeforeDeleteHooks = append(gcodeBeforeDeleteHooks, gcodeHook)
	case boil.BeforeUpsertHook:
		gcodeBeforeUpsertHooks = append(gcodeBeforeUpsertHooks, gcodeHook)
	case boil.AfterInsertHook:
		gcodeAfterInsertHooks = append(gcodeAfterInsertHooks, gcodeHook)
	case boil.AfterSelectHook:
		gcodeAfterSelectHooks = append(gcodeAfterSelectHooks, gcodeHook)
	case boil.AfterUpdateHook:
		gcodeAfterUpdateHooks = append(gcodeAfterUpdateHooks, gcodeHook)
	case boil.AfterDeleteHook:
		gcodeAfterDeleteHooks = append(gcodeAfterDeleteHooks, gcodeHook)
	case boil.AfterUpsertHook:
		gcodeAfterUpsertHooks = append(gcodeAfterUpsertHooks, gcodeHook)
	}
}

// OneG returns a single gcode record from the query using the global executor.
func (q gcodeQuery) OneG() (*Gcode, error) {
	return q.One(boil.GetDB())
}

// One returns a single gcode record from the query.
func (q gcodeQuery) One(exec boil.Executor) (*Gcode, error) {
	o := &Gcode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for gcodes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Gcode records from the query using the global executor.
func (q gcodeQuery) AllG() (GcodeSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Gcode records from the query.
func (q gcodeQuery) All(exec boil.Executor) (GcodeSlice, error) {
	var o []*Gcode

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Gcode slice")
	}

	if len(gcodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Gcode records in the query, and panics on error.
func (q gcodeQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Gcode records in the query.
func (q gcodeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count gcodes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q gcodeQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q gcodeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if gcodes exists")
	}

	return count > 0, nil
}

// Blob pointed to by the foreign key.
func (o *Gcode) Blob(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlobID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// LoadBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gcodeL) LoadBlob(e boil.Executor, singular bool, maybeGcode interface{}, mods queries.Applicator) error {
	var slice []*Gcode
	var object *Gcode

	if singular {
		object = maybeGcode.(*Gcode)
	} else {
		slice = *maybeGcode.(*[]*Gcode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gcodeR{}
		}
		args = append(args, object.BlobID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gcodeR{}
			}

			for _, a := range args {
				if a == obj.BlobID {
					continue Outer
				}
			}

			args = append(args, obj.BlobID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(gcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blob = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.Gcodes = append(foreign.R.Gcodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlobID == foreign.ID {
				local.R.Blob = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.Gcodes = append(foreign.R.Gcodes, local)
				break
			}
		}
	}

	return nil
}

// SetBlobG of the gcode to the related item.
// Sets o.R.Blob to related.
// Adds o to related.R.Gcodes.
// Uses the global database handle.
func (o *Gcode) SetBlobG(insert bool, related *Blob) error {
	return o.SetBlob(boil.GetDB(), insert, related)
}

// SetBlob of the gcode to the related item.
// Sets o.R.Blob to related.
// Adds o to related.R.Gcodes.
func (o *Gcode) SetBlob(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"gcodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blob_id"}),
		strmangle.WhereClause("\"", "\"", 2, gcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlobID = related.ID
	if o.R == nil {
		o.R = &gcodeR{
			Blob: related,
		}
	} else {
		o.R.Blob = related
	}

	if related.R == nil {
		related.R = &blobR{
			Gcodes: GcodeSlice{o},
		}
	} else {
		related.R.Gcodes = append(related.R.Gcodes, o)
	}

	return nil
}

// Gcodes retrieves all the records using an executor.
func Gcodes(mods ...qm.QueryMod) gcodeQuery {
	mods = append(mods, qm.From("\"gcodes\""))
	return gcodeQuery{NewQuery(mods...)}
}

// FindGcodeG retrieves a single record by ID.
func FindGcodeG(iD string, selectCols ...string) (*Gcode, error) {
	return FindGcode(boil.GetDB(), iD, selectCols...)
}

// FindGcode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGcode(exec boil.Executor, iD string, selectCols ...string) (*Gcode, error) {
	gcodeObj := &Gcode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gcodes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gcodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from gcodes")
	}

	return gcodeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Gcode) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Gcode) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no gcodes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gcodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gcodeInsertCacheMut.RLock()
	cache, cached := gcodeInsertCache[key]
	gcodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gcodeAllColumns,
			gcodeColumnsWithDefault,
			gcodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gcodeType, gcodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gcodeType, gcodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gcodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gcodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into gcodes")
	}

	if !cached {
		gcodeInsertCacheMut.Lock()
		gcodeInsertCache[key] = cache
		gcodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Gcode record using the global executor.
// See Update for more documentation.
func (o *Gcode) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Gcode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Gcode) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gcodeUpdateCacheMut.RLock()
	cache, cached := gcodeUpdateCache[key]
	gcodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gcodeAllColumns,
			gcodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update gcodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gcodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gcodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gcodeType, gcodeMapping, append(wl, gcodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update gcodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for gcodes")
	}

	if !cached {
		gcodeUpdateCacheMut.Lock()
		gcodeUpdateCache[key] = cache
		gcodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q gcodeQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q gcodeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for gcodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for gcodes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GcodeSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GcodeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gcodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gcodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in gcode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all gcode")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Gcode) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Gcode) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no gcodes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gcodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gcodeUpsertCacheMut.RLock()
	cache, cached := gcodeUpsertCache[key]
	gcodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gcodeAllColumns,
			gcodeColumnsWithDefault,
			gcodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gcodeAllColumns,
			gcodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert gcodes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gcodePrimaryKeyColumns))
			copy(conflict, gcodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gcodes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gcodeType, gcodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gcodeType, gcodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert gcodes")
	}

	if !cached {
		gcodeUpsertCacheMut.Lock()
		gcodeUpsertCache[key] = cache
		gcodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Gcode record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Gcode) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Gcode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Gcode) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Gcode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gcodePrimaryKeyMapping)
	sql := "DELETE FROM \"gcodes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from gcodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for gcodes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q gcodeQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q gcodeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no gcodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from gcodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for gcodes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GcodeSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GcodeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gcodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gcodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gcodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from gcode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for gcodes")
	}

	if len(gcodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Gcode) ReloadG() error {
	if o == nil {
		return errors.New("db: no Gcode provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Gcode) Reload(exec boil.Executor) error {
	ret, err := FindGcode(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GcodeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty GcodeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GcodeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GcodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gcodes\".* FROM \"gcodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gcodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in GcodeSlice")
	}

	*o = slice

	return nil
}

// GcodeExistsG checks if the Gcode row exists.
func GcodeExistsG(iD string) (bool, error) {
	return GcodeExists(boil.GetDB(), iD)
}

// GcodeExists checks if the Gcode row exists.
func GcodeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gcodes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if gcodes exists")
	}

	return exists, nil
}
